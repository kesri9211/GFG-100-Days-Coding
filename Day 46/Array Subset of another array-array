/*Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. Both the arrays can be sorted or unsorted. There can be duplicate elements.
Example 1:

Input:
a1[] = {11, 7, 1, 13, 21, 3, 7, 3}
a2[] = {11, 3, 7, 1, 7}
Output:
Yes
Explanation:
a2[] is a subset of a1[]*/

//time complexity O(n)
class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        long[] countArr = new long[(int) Math.pow(10, 6) + 1];
        if(n < m) {
            return "No";
        }
        for(int i = 0; i < n; i++) {
            countArr[(int) a1[i]] += 1;
        }
        for(int i = 0; i < m; i++) {
            if(countArr[(int) a2[i]] >= 1) {
                countArr[(int) a2[i]] -= 1;
            } else {
                return "No";
            }
        }
        return "Yes";
    }
}

//time complexity 0(n^2)
class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        int c=0;
        Arrays.sort(a1);
        Arrays.sort(a2);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(a2[i]==a1[j]){
                    a1[j]=-1;
                    c++;
                    break;
                }
            }
        }
        if(c==a2.length)return "Yes";
        else return "No";
        
    }
}
